package rpc;

message Empty {}

message File {
  required string name          = 1;
  optional uint64 revision      = 2;
  optional bytes  data          = 3;

  // Used in promise.file
  optional uint64 i_promise     = 4;
  optional uint64 last_promised = 5;
}

message Proposal {
  enum Type {
    FILE     = 0;
    ELECTION = 1;
  }

  required uint64 origin = 1;
  optional Type   type   = 2;

  // Used in Propose:
  optional uint64 proposal_id = 3;
  optional uint64 request_id  = 4;
  optional uint64 leader_id   = 5;

  // Used for FILE:
  repeated File   file = 6;

  // Used for ELECTION:
  optional uint64 new_leader_id = 7;
}

message Promise {
  required bool ack = 1;

  optional uint64 i_promise      = 2;
  optional uint64 last_promised  = 3;

  // Used for FILE:
  repeated File   file = 4;

  // Used for ELECTION:
  optional uint64 new_leader_id = 5;
}

message Ack {
  required bool ack = 1;
}

service Acceptor {
  rpc Propose(Proposal) returns (Promise);
  rpc Accept(Proposal) returns (Ack);
}

service Learner {
  rpc Lookup(File) returns (File);
  rpc Learn(Proposal) returns (Ack);
}
